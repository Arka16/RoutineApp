{"ast":null,"code":"function startsBefore(time1, time2) {\n  const timeParts1 = time1.split(':');\n  const timeParts2 = time2.split(':');\n  const hour1 = parseInt(timeParts1[0]);\n  const hour2 = parseInt(timeParts2[0]);\n  if (hour1 === hour2) {\n    const minute1 = parseInt(timeParts1[1]);\n    const minute2 = parseInt(timeParts2[1]);\n    return minute1 < minute2;\n  }\n  return hour1 < hour2;\n}\nfunction isValidPhoneNumber(phoneNumber) {\n  // Regular expression for a valid US phone number (10 digits, optional dashes)\n  const phoneRegex = /^\\d{10}$|^\\d{3}-\\d{3}-\\d{4}$/;\n  return phoneRegex.test(phoneNumber);\n}\nfunction isValidEmail(email) {\n  // Regular expression for a valid email address\n  const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n  return emailRegex.test(email);\n}\nmodule.exports = {\n  startsBefore,\n  isValidPhoneNumber,\n  isValidEmail\n};","map":{"version":3,"names":["startsBefore","time1","time2","timeParts1","split","timeParts2","hour1","parseInt","hour2","minute1","minute2","isValidPhoneNumber","phoneNumber","phoneRegex","test","isValidEmail","email","emailRegex","module","exports"],"sources":["/Users/arkapal/RoutineApp/routine-app/src/helper_functions/helper_functions.js"],"sourcesContent":["function startsBefore(time1, time2) {\n    const timeParts1 = time1.split(':');\n    const timeParts2 = time2.split(':');\n    const hour1 = parseInt(timeParts1[0]);\n    const hour2 = parseInt(timeParts2[0]);\n    \n    if (hour1 === hour2) {\n        const minute1 = parseInt(timeParts1[1]);\n        const minute2 = parseInt(timeParts2[1]);\n        return minute1 < minute2;\n    }\n    \n    return hour1 < hour2;\n}\n\nfunction isValidPhoneNumber(phoneNumber) {\n    // Regular expression for a valid US phone number (10 digits, optional dashes)\n    const phoneRegex = /^\\d{10}$|^\\d{3}-\\d{3}-\\d{4}$/;\n    return phoneRegex.test(phoneNumber);\n  }\n\nfunction isValidEmail(email) {\n    // Regular expression for a valid email address\n    const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n    return emailRegex.test(email);\n  }\n  \n\nmodule.exports = { startsBefore, isValidPhoneNumber, isValidEmail };\n"],"mappings":"AAAA,SAASA,YAAYA,CAACC,KAAK,EAAEC,KAAK,EAAE;EAChC,MAAMC,UAAU,GAAGF,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC;EACnC,MAAMC,UAAU,GAAGH,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;EACnC,MAAME,KAAK,GAAGC,QAAQ,CAACJ,UAAU,CAAC,CAAC,CAAC,CAAC;EACrC,MAAMK,KAAK,GAAGD,QAAQ,CAACF,UAAU,CAAC,CAAC,CAAC,CAAC;EAErC,IAAIC,KAAK,KAAKE,KAAK,EAAE;IACjB,MAAMC,OAAO,GAAGF,QAAQ,CAACJ,UAAU,CAAC,CAAC,CAAC,CAAC;IACvC,MAAMO,OAAO,GAAGH,QAAQ,CAACF,UAAU,CAAC,CAAC,CAAC,CAAC;IACvC,OAAOI,OAAO,GAAGC,OAAO;EAC5B;EAEA,OAAOJ,KAAK,GAAGE,KAAK;AACxB;AAEA,SAASG,kBAAkBA,CAACC,WAAW,EAAE;EACrC;EACA,MAAMC,UAAU,GAAG,8BAA8B;EACjD,OAAOA,UAAU,CAACC,IAAI,CAACF,WAAW,CAAC;AACrC;AAEF,SAASG,YAAYA,CAACC,KAAK,EAAE;EACzB;EACA,MAAMC,UAAU,GAAG,iDAAiD;EACpE,OAAOA,UAAU,CAACH,IAAI,CAACE,KAAK,CAAC;AAC/B;AAGFE,MAAM,CAACC,OAAO,GAAG;EAAEnB,YAAY;EAAEW,kBAAkB;EAAEI;AAAa,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}