{"ast":null,"code":"import axios from \"axios\";\nconst URL = \"http://localhost:3000\";\nexport function startsBefore(time1, time2) {\n  const timeParts1 = time1.split(':');\n  const timeParts2 = time2.split(':');\n  const hour1 = parseInt(timeParts1[0]);\n  const hour2 = parseInt(timeParts2[0]);\n  if (hour1 === hour2) {\n    const minute1 = parseInt(timeParts1[1]);\n    const minute2 = parseInt(timeParts2[1]);\n    return minute1 < minute2;\n  }\n  return hour1 < hour2;\n}\nexport function isValidPhoneNumber(phoneNumber) {\n  // Regular expression for a valid US phone number (10 digits, optional dashes)\n  const phoneRegex = /^\\d{10}$|^\\d{3}-\\d{3}-\\d{4}$/;\n  return phoneRegex.test(phoneNumber);\n}\nexport function isValidEmail(email) {\n  // Regular expression for a valid email address\n  const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n  return emailRegex.test(email);\n}\nfunction returnFormattedTime(originalFormattedTime) {\n  // Assuming the input format is \"HH:mm am/pm\"\n  const [time, period] = originalFormattedTime.split(' ');\n  const [hours, minutes] = time.split(':');\n\n  // Reformat the time\n  const formattedTime = `${hours}:${minutes} ${period}`;\n  return formattedTime;\n}\nfunction isCurrentTimeBetween(startHour, startMinute, endHour, endMinute) {\n  const currentDate = new Date();\n  const currentHour = currentDate.getHours();\n  const currentMinute = currentDate.getMinutes();\n  const startTimeInMinutes = startHour * 60 + startMinute;\n  const endTimeInMinutes = endHour * 60 + endMinute;\n  const currentTimeInMinutes = currentHour * 60 + currentMinute;\n  return currentTimeInMinutes >= startTimeInMinutes && currentTimeInMinutes < endTimeInMinutes;\n}\n// reminderHandler.js\n\nconst createReminderHandler = () => {\n  let lastReminderTime = 0;\n  return async function sendReminder(isPlay, index, username, st, et) {\n    const timeParts1 = st.split(':');\n    const hour1 = parseInt(timeParts1[0]);\n    const minute1 = parseInt(timeParts1[1]);\n    const timeParts2 = et.split(':');\n    const hour2 = parseInt(timeParts2[0]);\n    const minute2 = parseInt(timeParts2[1]);\n    const reminderInterval = 10 * 1000;\n    if (!isPlay && isCurrentTimeBetween(hour1, minute1, hour2, minute2)) {\n      const currentTime = Date.now();\n      if (currentTime - lastReminderTime >= reminderInterval) {\n        try {\n          const data = {\n            username,\n            index: 0\n          };\n          await axios.post(URL + \"/message\", data);\n          lastReminderTime = currentTime;\n        } catch (error) {\n          console.log(\"ERROR during sending reminder\");\n        }\n      }\n    }\n  };\n};\nexport const sendReminder = createReminderHandler();","map":{"version":3,"names":["axios","URL","startsBefore","time1","time2","timeParts1","split","timeParts2","hour1","parseInt","hour2","minute1","minute2","isValidPhoneNumber","phoneNumber","phoneRegex","test","isValidEmail","email","emailRegex","returnFormattedTime","originalFormattedTime","time","period","hours","minutes","formattedTime","isCurrentTimeBetween","startHour","startMinute","endHour","endMinute","currentDate","Date","currentHour","getHours","currentMinute","getMinutes","startTimeInMinutes","endTimeInMinutes","currentTimeInMinutes","createReminderHandler","lastReminderTime","sendReminder","isPlay","index","username","st","et","reminderInterval","currentTime","now","data","post","error","console","log"],"sources":["/Users/arkapal/RoutineApp/routine-app/src/helper_functions/helper_functions.js"],"sourcesContent":["import axios from \"axios\";\n\nconst URL = \"http://localhost:3000\"\n\nexport function startsBefore(time1, time2) {\n    const timeParts1 = time1.split(':');\n    const timeParts2 = time2.split(':');\n    const hour1 = parseInt(timeParts1[0]);\n    const hour2 = parseInt(timeParts2[0]);\n    \n    if (hour1 === hour2) {\n        const minute1 = parseInt(timeParts1[1]);\n        const minute2 = parseInt(timeParts2[1]);\n        return minute1 < minute2;\n    }\n    \n    return hour1 < hour2;\n}\n\nexport function isValidPhoneNumber(phoneNumber) {\n    // Regular expression for a valid US phone number (10 digits, optional dashes)\n    const phoneRegex = /^\\d{10}$|^\\d{3}-\\d{3}-\\d{4}$/;\n    return phoneRegex.test(phoneNumber);\n  }\n\nexport function isValidEmail(email) {\n    // Regular expression for a valid email address\n    const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n    return emailRegex.test(email);\n  }\n\n  function returnFormattedTime(originalFormattedTime) {\n    // Assuming the input format is \"HH:mm am/pm\"\n    const [time, period] = originalFormattedTime.split(' ');\n    const [hours, minutes] = time.split(':');\n  \n    // Reformat the time\n    const formattedTime = `${hours}:${minutes} ${period}`;\n  \n    return formattedTime;\n  }\n\n  function isCurrentTimeBetween(startHour, startMinute, endHour, endMinute) {\n    const currentDate = new Date();\n    const currentHour = currentDate.getHours();\n    const currentMinute = currentDate.getMinutes();\n  \n    const startTimeInMinutes = startHour * 60 + startMinute;\n    const endTimeInMinutes = endHour * 60 + endMinute;\n    const currentTimeInMinutes = currentHour * 60 + currentMinute;\n  \n    return currentTimeInMinutes >= startTimeInMinutes && currentTimeInMinutes < endTimeInMinutes;\n  }\n  // reminderHandler.js\n\nconst createReminderHandler = () => {\n  let lastReminderTime = 0;\n\n  return async function sendReminder(isPlay, index, username, st, et) {\n    const timeParts1 = st.split(':');\n    const hour1 = parseInt(timeParts1[0]);\n    const minute1 = parseInt(timeParts1[1]);\n\n    const timeParts2 = et.split(':');\n    const hour2 = parseInt(timeParts2[0]);\n    const minute2 = parseInt(timeParts2[1]);\n\n    const reminderInterval = 10 * 1000;\n\n    if (!isPlay && isCurrentTimeBetween(hour1, minute1, hour2, minute2)) {\n      const currentTime = Date.now();\n      if (currentTime - lastReminderTime >= reminderInterval) {\n        try {\n          const data = { username, index: 0 };\n          await axios.post(URL + \"/message\", data);\n          lastReminderTime = currentTime;\n        } catch (error) {\n          console.log(\"ERROR during sending reminder\");\n        }\n      }\n    }\n  };\n};\n\nexport const sendReminder = createReminderHandler();\n\n  \n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}