{"ast":null,"code":"import axios from \"axios\";\nconst URL = \"http://localhost:3000\";\nexport function startsBefore(time1, time2) {\n  const timeParts1 = time1.split(':');\n  const timeParts2 = time2.split(':');\n  const hour1 = parseInt(timeParts1[0]);\n  const hour2 = parseInt(timeParts2[0]);\n  if (hour1 === hour2) {\n    const minute1 = parseInt(timeParts1[1]);\n    const minute2 = parseInt(timeParts2[1]);\n    return minute1 < minute2;\n  }\n  return hour1 < hour2;\n}\nexport function isValidPhoneNumber(phoneNumber) {\n  // Regular expression for a valid US phone number (10 digits, optional dashes)\n  const phoneRegex = /^\\d{10}$|^\\d{3}-\\d{3}-\\d{4}$/;\n  return phoneRegex.test(phoneNumber);\n}\nexport function isValidEmail(email) {\n  // Regular expression for a valid email address\n  const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n  return emailRegex.test(email);\n}\nfunction returnFormattedTime(originalFormattedTime) {\n  // Assuming the input format is \"HH:mm am/pm\"\n  const [time, period] = originalFormattedTime.split(' ');\n  const [hours, minutes] = time.split(':');\n\n  // Reformat the time\n  const formattedTime = `${hours}:${minutes} ${period}`;\n  return formattedTime;\n}\nfunction isCurrentTimeBetween(startHour, startMinute, endHour, endMinute) {\n  const currentDate = new Date();\n  const currentHour = currentDate.getHours();\n  const currentMinute = currentDate.getMinutes();\n  const startTimeInMinutes = startHour * 60 + startMinute;\n  const endTimeInMinutes = endHour * 60 + endMinute;\n  const currentTimeInMinutes = currentHour * 60 + currentMinute;\n  return currentTimeInMinutes >= startTimeInMinutes && currentTimeInMinutes < endTimeInMinutes;\n}\nfunction isCurrentTimeLess(startHour, startMinute) {\n  const currentDate = new Date();\n  const currentHour = currentDate.getHours();\n  const currentMinute = currentDate.getMinutes();\n  const startTimeInMinutes = startHour * 60 + startMinute;\n  const currentTimeInMinutes = currentHour * 60 + currentMinute;\n  return currentTimeInMinutes < startTimeInMinutes;\n}\nfunction isCurrentTimeGreater(endHour, endMinute) {\n  const currentDate = new Date();\n  const currentHour = currentDate.getHours();\n  const currentMinute = currentDate.getMinutes();\n  const endTimeInMinutes = endHour * 60 + endMinute;\n  const currentTimeInMinutes = currentHour * 60 + currentMinute;\n  return currentTimeInMinutes > endTimeInMinutes;\n}\nlet lastReminderTime = 0;\nexport async function sendReminder(playPauseStates, username, data, setPastTasks) {\n  let index = -1;\n  const newPastStates = Array(data.length).fill(false); // Initialize an array\n\n  for (var i = 0; i < data.length; i++) {\n    var st = data[i].startTime;\n    var et = data[i].endTime;\n    if (st && et) {\n      const timeParts1 = st.split(\":\");\n      const hour1 = parseInt(timeParts1[0]);\n      const minute1 = parseInt(timeParts1[1]);\n      const timeParts2 = et.split(\":\");\n      const hour2 = parseInt(timeParts2[0]);\n      const minute2 = parseInt(timeParts2[1]);\n      if (isCurrentTimeGreater(hour2, minute2)) {\n        newPastStates[i] = true;\n      }\n      if (isCurrentTimeBetween(hour1, minute1, hour2, minute2)) {\n        index = i;\n        break;\n      }\n    }\n  }\n  setPastTasks(newPastStates);\n  console.log(\"TASK TO MESSAGE IS \");\n  console.log(index);\n  if (index !== -1 && !playPauseStates[index]) {\n    const reminderInterval = 10 * 1000;\n    const currentTime = Date.now();\n    if (currentTime - lastReminderTime >= reminderInterval) {\n      try {\n        const data = {\n          username,\n          index\n        };\n        await axios.post(URL + \"/message\", data);\n        lastReminderTime = currentTime;\n      } catch (error) {\n        console.log(\"ERROR during sending reminder\");\n      }\n    }\n  }\n}","map":{"version":3,"names":["axios","URL","startsBefore","time1","time2","timeParts1","split","timeParts2","hour1","parseInt","hour2","minute1","minute2","isValidPhoneNumber","phoneNumber","phoneRegex","test","isValidEmail","email","emailRegex","returnFormattedTime","originalFormattedTime","time","period","hours","minutes","formattedTime","isCurrentTimeBetween","startHour","startMinute","endHour","endMinute","currentDate","Date","currentHour","getHours","currentMinute","getMinutes","startTimeInMinutes","endTimeInMinutes","currentTimeInMinutes","isCurrentTimeLess","isCurrentTimeGreater","lastReminderTime","sendReminder","playPauseStates","username","data","setPastTasks","index","newPastStates","Array","length","fill","i","st","startTime","et","endTime","console","log","reminderInterval","currentTime","now","post","error"],"sources":["/Users/arkapal/RoutineApp/routine-app/src/helper_functions/helper_functions.js"],"sourcesContent":["import axios from \"axios\";\n\nconst URL = \"http://localhost:3000\"\n\nexport function startsBefore(time1, time2) {\n    const timeParts1 = time1.split(':');\n    const timeParts2 = time2.split(':');\n    const hour1 = parseInt(timeParts1[0]);\n    const hour2 = parseInt(timeParts2[0]);\n    \n    if (hour1 === hour2) {\n        const minute1 = parseInt(timeParts1[1]);\n        const minute2 = parseInt(timeParts2[1]);\n        return minute1 < minute2;\n    }\n    \n    return hour1 < hour2;\n}\n\nexport function isValidPhoneNumber(phoneNumber) {\n    // Regular expression for a valid US phone number (10 digits, optional dashes)\n    const phoneRegex = /^\\d{10}$|^\\d{3}-\\d{3}-\\d{4}$/;\n    return phoneRegex.test(phoneNumber);\n  }\n\nexport function isValidEmail(email) {\n    // Regular expression for a valid email address\n    const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n    return emailRegex.test(email);\n  }\n\n  function returnFormattedTime(originalFormattedTime) {\n    // Assuming the input format is \"HH:mm am/pm\"\n    const [time, period] = originalFormattedTime.split(' ');\n    const [hours, minutes] = time.split(':');\n  \n    // Reformat the time\n    const formattedTime = `${hours}:${minutes} ${period}`;\n  \n    return formattedTime;\n  }\n\n  function isCurrentTimeBetween(startHour, startMinute, endHour, endMinute) {\n    const currentDate = new Date();\n    const currentHour = currentDate.getHours();\n    const currentMinute = currentDate.getMinutes();\n  \n    const startTimeInMinutes = startHour * 60 + startMinute;\n    const endTimeInMinutes = endHour * 60 + endMinute;\n    const currentTimeInMinutes = currentHour * 60 + currentMinute;\n  \n    return currentTimeInMinutes >= startTimeInMinutes && currentTimeInMinutes < endTimeInMinutes;\n  }\n\n  function isCurrentTimeLess(startHour, startMinute) {\n    const currentDate = new Date();\n    const currentHour = currentDate.getHours();\n    const currentMinute = currentDate.getMinutes();\n  \n    const startTimeInMinutes = startHour * 60 + startMinute;\n    const currentTimeInMinutes = currentHour * 60 + currentMinute;\n  \n    return currentTimeInMinutes < startTimeInMinutes;\n  }\n\n  function isCurrentTimeGreater(endHour, endMinute) {\n    const currentDate = new Date();\n    const currentHour = currentDate.getHours();\n    const currentMinute = currentDate.getMinutes();\n    const endTimeInMinutes = endHour * 60 + endMinute;\n    const currentTimeInMinutes = currentHour * 60 + currentMinute;\n    return currentTimeInMinutes > endTimeInMinutes;\n  }\n\n  let lastReminderTime = 0;\n  export async function sendReminder(playPauseStates, username, data, setPastTasks) {\n    let index = -1;\n    const newPastStates = Array(data.length).fill(false); // Initialize an array\n  \n    for (var i = 0; i < data.length; i++) {\n      var st = data[i].startTime;\n      var et = data[i].endTime;\n  \n      if (st && et) {\n        const timeParts1 = st.split(\":\");\n        const hour1 = parseInt(timeParts1[0]);\n        const minute1 = parseInt(timeParts1[1]);\n        const timeParts2 = et.split(\":\");\n        const hour2 = parseInt(timeParts2[0]);\n        const minute2 = parseInt(timeParts2[1]);\n  \n        if (isCurrentTimeGreater(hour2, minute2)) {\n          newPastStates[i] = true;\n        }\n  \n        if (isCurrentTimeBetween(hour1, minute1, hour2, minute2)) {\n          index = i;\n          break;\n        }\n      }\n    }\n    setPastTasks(newPastStates);\n    console.log(\"TASK TO MESSAGE IS \");\n    console.log(index);\n  \n    if (index !== -1 && !playPauseStates[index]) {\n      const reminderInterval = 10 * 1000;\n      const currentTime = Date.now();\n      if (currentTime - lastReminderTime >= reminderInterval) {\n        try {\n          const data = { username, index };\n          await axios.post(URL + \"/message\", data);\n          lastReminderTime = currentTime;\n        } catch (error) {\n          console.log(\"ERROR during sending reminder\");\n        }\n      }\n    }\n  }\n  \n  \n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}